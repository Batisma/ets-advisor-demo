[tool.poetry]
name = "ets-impact-advisor"
version = "1.0.0"
description = "ETS Impact Advisor - Fleet Analytics with Microsoft Fabric and Power BI"
authors = ["Analytics Engineering Team <analytics@company.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/your-org/ets-advisor-demo"
repository = "https://github.com/your-org/ets-advisor-demo"
documentation = "https://github.com/your-org/ets-advisor-demo#readme"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
packages = [{include = "scripts"}]

[tool.poetry.dependencies]
python = "^3.9"
# Data processing
pandas = "^2.1.0"
numpy = "^1.24.0"
# PySpark and Delta Lake
pyspark = "^3.5.0"
delta-spark = "^3.0.0"
# Kafka integration
confluent-kafka = "^2.3.0"
# Optimization
ortools = "^9.8.0"
# Synthetic data generation
faker = "^20.1.0"
# Azure SDK
azure-storage-blob = "^12.19.0"
azure-eventhub = "^5.11.0"
azure-identity = "^1.15.0"
azure-keyvault-secrets = "^4.7.0"
# Utilities
python-dotenv = "^1.0.0"
click = "^8.1.0"
pydantic = "^2.5.0"
requests = "^2.31.0"

[tool.poetry.group.dev.dependencies]
# Code quality
ruff = "^0.1.6"
mypy = "^1.7.0"
black = "^23.11.0"
isort = "^5.12.0"
# Security
bandit = "^1.7.5"
safety = "^2.3.0"
# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.4.0"
# Pre-commit hooks
pre-commit = "^3.5.0"

[tool.poetry.group.test.dependencies]
# Testing framework
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.5.0"
pytest-mock = "^3.12.0"
# Test data
hypothesis = "^6.88.0"
freezegun = "^1.2.0"

[tool.poetry.scripts]
generate-sample-data = "scripts.generate_sample_data:main"
ingest-telematics = "scripts.ingest_telematics:main"
ingest-fuel = "scripts.ingest_fuel:main"
generate-scenarios = "scripts.generate_scenarios:main"
optimize-fleet = "scripts.opt_fleet_replacement:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# =============================================================================
# Tool Configuration
# =============================================================================

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "UP", # pyupgrade
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "B904", # Allow `raise` without `from` inside `except`
    "C901", # too complex
    "W191", # indentation contains tabs
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG", "FBT", "PLR2004", "S101", "TID252"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "pyspark.*",
    "delta.*",
    "confluent_kafka.*",
    "ortools.*",
    "faker.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
force_sort_within_sections = true
known_first_party = ["scripts"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["scripts"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
tests = ["B201", "B301", "B302", "B303", "B304", "B305", "B306", "B307", "B308", "B309", "B310", "B311", "B312", "B313", "B314", "B315", "B316", "B317", "B318", "B319", "B320", "B321", "B322", "B323", "B324", "B325", "B601", "B602", "B603", "B604", "B605", "B606", "B607", "B608", "B609", "B610", "B611", "B701", "B702", "B703"]

# =============================================================================
# Development Commands
# =============================================================================
# 
# Setup development environment:
#   poetry install --with dev,test
# 
# Run code quality checks:
#   poetry run ruff check scripts/
#   poetry run ruff format scripts/
#   poetry run mypy scripts/
#   poetry run bandit -r scripts/
# 
# Run tests:
#   poetry run pytest
#   poetry run pytest --cov=scripts --cov-report=html
# 
# Run specific script:
#   poetry run generate-sample-data --output-dir data/
#   poetry run ingest-telematics --lakehouse-path "path/to/lakehouse"
# 
# Install pre-commit hooks:
#   poetry run pre-commit install
# 
# Build package:
#   poetry build
# 
# ============================================================================= 